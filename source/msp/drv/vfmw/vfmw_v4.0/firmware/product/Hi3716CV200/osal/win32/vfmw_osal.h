
/******************************************************************************

  版权所有 (C), 2001-2011, 华为技术有限公司

******************************************************************************
    文 件 名   : vfmw_osal.h
    版 本 号   : 初稿
    作    者   : 
    生成日期   : 
    最近修改   :
    功能描述   : 为vfmw定制的操作系统抽象模块
                 

    修改历史   :
    1.日    期 : 2009-05-12
    作    者   : 
    修改内容   : 

******************************************************************************/

#ifndef __VFMW_OSAL_HEADER__
#define  __VFMW_OSAL_HEADER__

#include "vfmw.h"
#include "windows.h"
#include "stdlib.h"
#include "stdio.h"


/*======================================================================*/
/*                            常数定义                                  */
/*======================================================================*/
#if 0
typedef  unsigned __int64	UINT64;
typedef  __int64			SINT64;
typedef  unsigned int		UINT32;
typedef  int				SINT32;
typedef  unsigned short		UINT16;
typedef  short				SINT16;
typedef  unsigned char		UINT8;
typedef  char				SINT8;
typedef  const void         CONSTVOID;
typedef  unsigned           USIGN;
#define  VOID               void
#endif

#define OSAL_OK     0
#define OSAL_ERR   -1

/*======================================================================*/
/*                            数据结构和枚举                            */
/*======================================================================*/
typedef struct hiOSAL_MEM_S
{
    SINT32     PhyAddr;
	VOID       *VirAddr;
	SINT32     Length;
} OSAL_MEM_S;

/*======================================================================*/
/*                            数据类型抽象                              */
/*======================================================================*/
/* 任务 ---  通常就是是线程.   操作包括:  创建，销毁，激活  */
typedef  HANDLE       OSAL_TASK;

/* 事件 --- 通信或协调机制，支持等待超时处理.  操作包括:  初始化，发出，等待  */
typedef  HANDLE       OSAL_EVENT;

/* 任务锁 --- 线程之间对临界区保护机制.  操作包括:  创建，锁定，解锁  */
typedef  HANDLE       OSAL_TASK_MUTEX;

/* 任务锁 --- 线程与中断服务程序之间对临界区保护.  操作包括:  创建，锁定，解锁  */
typedef  HANDLE       OSAL_IRQ_LOCK;


/*======================================================================*/
/*                           操作抽象                                   */
/*======================================================================*/

/************************************************************************/
/* 休眠(毫秒精度)                                                       */
/************************************************************************/
#define OSAL_MSLEEP(nMs)    Sleep(nMs)

/************************************************************************/
/* 获取系统时间                                                         */
/************************************************************************/
SINT32 OSAL_GetTimeInMs(VOID);

/************************************************************************/
/* 申请虚拟内存（可能非物理连续）                                       */
/************************************************************************/
VOID *OSAL_AllocVirMem(SINT32 Size);

/************************************************************************/
/* 释放虚拟内存（可能非物理连续）                                       */
/************************************************************************/
VOID OSAL_FreeVirMem(VOID *p);

/************************************************************************/
/* 创建任务                                                             */
/************************************************************************/
SINT32 OSAL_CreateTask( OSAL_TASK *pTask, SINT8 TaskName[], VOID *pTaskFunction );
/************************************************************************/
/* 激活任务                                                             */
/************************************************************************/
SINT32 OSAL_WakeupTask( OSAL_TASK *pTask );
/************************************************************************/
/* 销毁任务                                                             */
/************************************************************************/
SINT32 OSAL_DeleteTask(OSAL_TASK *pTask);


/************************************************************************/
/* 初始化事件                                                           */
/************************************************************************/
SINT32 OSAL_InitEvent( OSAL_EVENT *pEvent, SINT32 InitVal ); 
/************************************************************************/
/* 发出事件                                                             */
/************************************************************************/
SINT32 OSAL_GiveEvent( OSAL_EVENT *pEvent ); 
/************************************************************************/
/* 等待事件                                                             */
/* 事件发生返回OSAL_OK，超时返回OSAL_ERR                                */
/************************************************************************/
SINT32 OSAL_WaitEvent( OSAL_EVENT *pEvent, SINT32 msWaitTime ); 


/************************************************************************/
/* 初始化线程互斥锁                                                     */
/************************************************************************/
SINT32 OSAL_InitTaskMutex( OSAL_TASK_MUTEX *pTaskMutex );
/************************************************************************/
/* 线程互斥加锁                                                         */
/************************************************************************/
SINT32 OSAL_LockTaskMutex( OSAL_TASK_MUTEX *pTaskMutex );
/************************************************************************/
/* 线程互斥解锁                                                         */
/************************************************************************/
SINT32 OSAL_UnlockTaskMutex( OSAL_TASK_MUTEX *pTaskMutex );


/************************************************************************/
/* 初始化中断互斥锁                                                     */
/************************************************************************/
SINT32 OSAL_InitIntrMutex( OSAL_IRQ_LOCK *pIntrMutex );
/************************************************************************/
/* 中断互斥加锁(关中断)                                                 */
/************************************************************************/
SINT32 OSAL_LockIRQ( OSAL_IRQ_LOCK *pIntrMutex );
/************************************************************************/
/* 中断互斥解锁(开中断)                                                 */
/************************************************************************/
SINT32 OSAL_UnLockIRQ( OSAL_IRQ_LOCK *pIntrMutex );


/************************************************************************/
/* 分配内存                                                             */
/************************************************************************/
SINT32 OSAL_AllocMemory( SINT32 ExpectPhyAddr, SINT32 ExpectSize, OSAL_MEM_S *pOsalMem );
/************************************************************************/
/* 释放内存                                                             */
/************************************************************************/
SINT32 OSAL_ReleaseMemory( OSAL_MEM_S *pMemRet );
/************************************************************************/
/* 映射寄存器虚拟地址                                                   */
/************************************************************************/
SINT32 OSAL_MapRegisterAddr( SINT32 RegPhyAddr, SINT32 Range, OSAL_MEM_S *pOsalMem );
/************************************************************************/
/* 去映射寄存器虚拟地址                                                 */
/************************************************************************/
SINT32 OSAL_UnmapRegisterAddr( OSAL_MEM_S *pOsalMem );



#endif


