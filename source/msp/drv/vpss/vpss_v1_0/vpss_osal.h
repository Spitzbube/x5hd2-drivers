#ifndef __VPSS_OSAL_H__
#define __VPSS_OSAL_H__

#include <linux/wait.h>
#include <linux/sched.h>
#include <linux/semaphore.h>
#include <linux/spinlock.h>
#include <linux/fs.h>
#include <linux/mm.h>

#include <asm/uaccess.h>
#include "hi_type.h"
#include "hi_common.h"
#include "vpss_common.h"
#include "drv_mmz_ext.h"


typedef  struct file   FILE;
/************************************************************************/
/* file: open/close/write                                               */
/************************************************************************/
struct file *VPSS_OSAL_fopen(const char *filename, int flags, int mode);
void VPSS_OSAL_fclose(struct file *filp);
int VPSS_OSAL_fread(char *buf, unsigned int len, struct file *filp);
int VPSS_OSAL_fwrite(char *buf, int len, struct file *filp);
 
/*======================================================================*/
/*                            数据类型抽象                              */
/*======================================================================*/

/* 事件 --- 通信或协调机制，支持等待超时处理.  操作包括:  初始化，发出，等待  */
#define OSAL_OK     0
#define OSAL_ERR   -1

#define EVENT_DONE 1
#define EVENT_UNDO 0

typedef struct hiKERN_EVENT_S
{
	wait_queue_head_t   queue_head;
	HI_S32              flag_1;
	HI_S32              flag_2;
} KERN_EVENT_S;

typedef  KERN_EVENT_S           OSAL_EVENT;


/************************************************************************/
/* 初始化事件                                                           */
/************************************************************************/
HI_S32 VPSS_OSAL_InitEvent( OSAL_EVENT *pEvent, HI_S32 InitVal1, HI_S32 InitVal2);

/************************************************************************/
/* 发出事件                                                             */
/************************************************************************/
HI_S32 VPSS_OSAL_GiveEvent( OSAL_EVENT *pEvent, HI_S32 InitVal1, HI_S32 InitVal2);

/************************************************************************/
/* 等待事件                                                             */
/* 事件发生返回OSAL_OK，超时返回OSAL_ERR                                */
/************************************************************************/
HI_S32 VPSS_OSAL_WaitEvent( OSAL_EVENT *pEvent, HI_S32 s32WaitTime ); 


/************************************************************************/
/* 重置事件                                                             */
/************************************************************************/
HI_S32 VPSS_OSAL_ResetEvent( OSAL_EVENT *pEvent, HI_S32 InitVal1, HI_S32 InitVal2);




/*======================================================================*/
/*                            数据类型抽象                              */
/*======================================================================*/

/* 互斥锁 保护共享数据*/
typedef struct semaphore  VPSS_OSAL_LOCK;

/************************************************************************/
/* 初始化互斥锁                                                         */
/************************************************************************/
HI_S32 VPSS_OSAL_InitLOCK(VPSS_OSAL_LOCK *pLock, HI_U32 u32InitVal);

/************************************************************************/
/* 抢占互斥锁                                                             */
/************************************************************************/
HI_S32 VPSS_OSAL_DownLock(VPSS_OSAL_LOCK *pLock);

/************************************************************************/
/* 释放互斥锁                                                           */
/************************************************************************/
HI_S32 VPSS_OSAL_UpLock(VPSS_OSAL_LOCK *pLock); 

/************************************************************************/
/* 尝试抢占互斥锁                                                       */
/* 若互斥锁已经被占用，返回                                             */
/************************************************************************/
HI_S32 VPSS_OSAL_TryLock(VPSS_OSAL_LOCK *pLock); 



/*======================================================================*/
/*                            数据类型抽象                              */
/*======================================================================*/

/* 自旋 保护中断/线程共享数据*/
typedef struct{
    spinlock_t     irq_lock;
    unsigned long  irq_lockflags;
    int            isInit;
}VPSS_OSAL_SPIN;

/************************************************************************/
/* 初始化互斥锁                                                         */
/************************************************************************/
HI_S32 VPSS_OSAL_InitSpin(VPSS_OSAL_SPIN *pLock, HI_U32 u32InitVal);

/************************************************************************/
/* 抢占互斥锁                                                           */
/************************************************************************/
HI_S32 VPSS_OSAL_DownSpin(VPSS_OSAL_SPIN *pLock);

/************************************************************************/
/* 释放互斥锁                                                           */
/************************************************************************/
HI_S32 VPSS_OSAL_UpSpin(VPSS_OSAL_SPIN *pLock); 

/************************************************************************/
/* 尝试获取自旋锁                                                           */
/************************************************************************/
HI_S32 VPSS_OSAL_TryLockSpin(VPSS_OSAL_SPIN *pLock);



/************************************************************************/
/* 获取PROC参数                                                     */
/************************************************************************/
HI_S32 VPSS_OSAL_GetProcArg(HI_CHAR*  chCmd,HI_CHAR*  chArg,HI_U32 u32ArgIdx);

/************************************************************************/
/* 解析PROC命令                                                     */
/************************************************************************/
HI_S32 VPSS_OSAL_ParseCmd(HI_CHAR*  chArg1,HI_CHAR*  chArg2,HI_CHAR*  chArg3,HI_VOID *pstCmd);
HI_S32 VPSS_OSAL_StrToNumb(HI_CHAR*  chStr,HI_U32 *pu32Numb);




/************************************************************************/
/* 写文件                                                     */
/************************************************************************/
HI_S32 VPSS_OSAL_WRITEYUV(HI_DRV_VIDEO_FRAME_S *pstFrame,HI_CHAR* pchFile);
#endif
